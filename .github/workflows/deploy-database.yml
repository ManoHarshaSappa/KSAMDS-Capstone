name: Deploy Database

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
  push:
    branches:
      - main
    paths:
      - 'database/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./database/terraform

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.13.4
        terraform_wrapper: false

    - name: Verify AWS Credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_LAB_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_LAB_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_LAB_SESSION_TOKEN }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        aws sts get-caller-identity

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_LAB_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_LAB_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_LAB_SESSION_TOKEN }}
        TF_VAR_aws_access_key_id: ${{ secrets.AWS_LAB_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key: ${{ secrets.AWS_LAB_SECRET_ACCESS_KEY }}
        TF_VAR_aws_session_token: ${{ secrets.AWS_LAB_SESSION_TOKEN }}
        TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        terraform plan -out=tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan

    - name: Setup PostgreSQL Client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Wait for Database to be ready
      run: |
        DB_HOST=$(terraform output -raw db_endpoint)
        
        MAX_RETRIES=30
        RETRY_COUNT=0
        
        until pg_isready -h $DB_HOST -U ${{ secrets.DB_USERNAME }}; do
          RETRY_COUNT=$((RETRY_COUNT+1))
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Timed out waiting for database to be ready"
            exit 1
          fi
          echo "Database not ready, waiting 30 seconds... (attempt $RETRY_COUNT/$MAX_RETRIES)"
          sleep 30
        done

    - name: Initialize Database Schema
      run: |
        export PGPASSWORD=${{ secrets.DB_PASSWORD }}
        DB_HOST=$(terraform output -raw db_endpoint)
        
        # Test connection
        psql -h $DB_HOST -U ${{ secrets.DB_USERNAME }} -d ksamds -c "SELECT version();"
        
        # Apply schema
        psql -h $DB_HOST -U ${{ secrets.DB_USERNAME }} -d ksamds -f ../KSAMDS_DB.sql
        
        # Verify installation
        psql -h $DB_HOST -U ${{ secrets.DB_USERNAME }} -d ksamds -c "\dt"
