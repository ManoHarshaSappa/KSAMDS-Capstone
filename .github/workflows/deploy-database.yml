name: Deploy Database

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
  push:
    branches:
      - main
    paths:
      - 'database/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./database/terraform

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Print Environment Info
      run: |
        echo "=================== Environment Information ==================="
        echo "GitHub Ref: ${{ github.ref }}"
        echo "GitHub Event Name: ${{ github.event_name }}"
        echo "Working Directory: $(pwd)"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "============================================================"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.13.4
        terraform_wrapper: false

    - name: Verify AWS Credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_LAB_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_LAB_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_LAB_SESSION_TOKEN }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        echo "================= Verifying AWS Credentials ================="
        echo "Checking AWS CLI configuration..."
        aws sts get-caller-identity || {
          echo "❌ Failed to verify AWS credentials"
          exit 1
        }
        echo "AWS Region: ${AWS_DEFAULT_REGION:-not set}"
        echo "============================================================"

    - name: Terraform Init
      run: |
        echo "=================== Terraform Init Start ===================="
        echo "Terraform Version:"
        terraform version
        echo "Directory Contents:"
        ls -la
        echo "Starting terraform init..."
        terraform init
        echo "Terraform initialization complete"
        echo "============================================================"

    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_LAB_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_LAB_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_LAB_SESSION_TOKEN }}
        TF_VAR_aws_access_key_id: ${{ secrets.AWS_LAB_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key: ${{ secrets.AWS_LAB_SECRET_ACCESS_KEY }}
        TF_VAR_aws_session_token: ${{ secrets.AWS_LAB_SESSION_TOKEN }}
        TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        AWS_DEFAULT_REGION: us-east-1
        AWS_SDK_LOAD_CONFIG: 1
        AWS_DEBUG: true
      run: |
        echo "==================== Terraform Plan Start ==================="
        echo "Starting Terraform plan with debug output..."
        echo "Workspace: $(terraform workspace show)"
        echo "Current working directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        # Save Terraform and provider versions for debugging
        echo "Terraform and Provider Versions:"
        terraform version
        
        export TF_LOG=DEBUG
        export TF_LOG_PATH=terraform_plan.log
        
        echo "Running terraform plan with timeout..."
        timeout 15m terraform plan -out=tfplan -parallelism=20 || {
          echo "⚠️ Terraform plan timed out or failed!"
          echo "================== Terraform Plan Logs ==================="
          if [ -f terraform_plan.log ]; then
            echo "Last 100 lines of Terraform logs:"
            tail -n 100 terraform_plan.log
            echo "AWS Provider Errors (if any):"
            grep -A 5 -B 5 "aws_" terraform_plan.log | grep -A 5 -B 5 "Error"
            echo "Full logs saved to: terraform_plan.log"
            
            # Check for common issues
            echo "Checking for common issues..."
            grep -i "timeout" terraform_plan.log || true
            grep -i "connection refused" terraform_plan.log || true
            grep -i "access denied" terraform_plan.log || true
          else
            echo "No terraform log file found!"
          fi
          echo "========================================================="
          exit 1
        }
        echo "Terraform plan completed successfully"
        echo "============================================================"

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        echo "==================== Terraform Apply Start =================="
        echo "Starting Terraform apply..."
        
        export TF_LOG=DEBUG
        export TF_LOG_PATH=terraform_apply.log
        
        terraform apply -auto-approve tfplan || {
          echo "⚠️ Terraform apply failed!"
          echo "================== Terraform Apply Logs =================="
          if [ -f terraform_apply.log ]; then
            echo "Last 100 lines of Terraform logs:"
            tail -n 100 terraform_apply.log
            echo "AWS Provider Errors (if any):"
            grep -A 5 -B 5 "aws_" terraform_apply.log | grep -A 5 -B 5 "Error"
          fi
          echo "======================================================="
          exit 1
        }
        
        echo "Terraform apply completed successfully"
        echo "Resources created:"
        terraform show
        echo "============================================================"

    - name: Setup PostgreSQL Client
      run: |
        echo "================= Installing PostgreSQL Client ================"
        echo "Updating package lists..."
        sudo apt-get update
        echo "Installing postgresql-client..."
        sudo apt-get install -y postgresql-client
        echo "PostgreSQL client version:"
        psql --version
        echo "============================================================"

    - name: Wait for Database to be ready
      run: |
        echo "================= Waiting for RDS Instance =================="
        echo "Getting RDS endpoint..."
        DB_HOST=$(terraform output -raw db_endpoint)
        echo "RDS Host: $DB_HOST"
        
        MAX_RETRIES=30
        RETRY_COUNT=0
        
        until pg_isready -h $DB_HOST -U ${{ secrets.DB_USERNAME }}; do
          RETRY_COUNT=$((RETRY_COUNT+1))
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "❌ Timed out waiting for database to be ready after $((RETRY_COUNT * 30)) seconds"
            exit 1
          fi
          echo "Attempt $RETRY_COUNT of $MAX_RETRIES: Database not ready, waiting 30 seconds..."
          sleep 30
        done
        
        echo "✅ Database is ready and accepting connections!"
        echo "============================================================"

    - name: Initialize Database Schema
      run: |
        echo "================= Initializing Database Schema =============="
        echo "Setting up database connection..."
        export PGPASSWORD=${{ secrets.DB_PASSWORD }}
        DB_HOST=$(terraform output -raw db_endpoint)
        echo "RDS Host: $DB_HOST"
        
        echo "Testing database connection..."
        if psql -h $DB_HOST -U ${{ secrets.DB_USERNAME }} -d ksamds -c "SELECT version();" > /dev/null 2>&1; then
          echo "✅ Database connection successful"
        else
          echo "❌ Failed to connect to database"
          exit 1
        fi
        
        echo "Applying database schema..."
        if psql -h $DB_HOST -U ${{ secrets.DB_USERNAME }} -d ksamds -f ../KSAMDS_DB.sql; then
          echo "✅ Schema applied successfully"
        else
          echo "❌ Failed to apply schema"
          exit 1
        fi
        
        echo "Verifying schema installation..."
        echo "Tables in database:"
        psql -h $DB_HOST -U ${{ secrets.DB_USERNAME }} -d ksamds -c "\dt"
        
        echo "Checking core tables..."
        psql -h $DB_HOST -U ${{ secrets.DB_USERNAME }} -d ksamds -c "
          SELECT table_name, (SELECT count(*) FROM information_schema.columns WHERE table_name = t.table_name) as column_count 
          FROM information_schema.tables t 
          WHERE table_schema = 'ksamds'
          ORDER BY table_name;"
        echo "============================================================"
