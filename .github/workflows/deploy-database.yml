name: Deploy Database

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
  push:
    branches:
      - main
    paths:
      - 'database/**'

env:
  TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_LAB_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_LAB_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_LAB_SESSION_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./database/terraform

    steps:
    - uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: |
        echo "Starting Terraform plan with debug output..."
        export TF_LOG=DEBUG
        export TF_LOG_PATH=terraform_plan.log
        
        # Run plan with timeout
        timeout 15m terraform plan -out=tfplan -parallelism=20 || {
          echo "Terraform plan timed out or failed. Checking logs..."
          if [ -f terraform_plan.log ]; then
            echo "Last 50 lines of Terraform logs:"
            tail -n 50 terraform_plan.log
          fi
          exit 1
        }
      env:
        # Add AWS default region to speed up API calls
        AWS_DEFAULT_REGION: us-east-1
        # Increase AWS SDK logging
        AWS_SDK_LOAD_CONFIG: 1
        AWS_DEBUG: true

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan

    - name: Setup PostgreSQL Client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Wait for Database to be ready
      run: |
        echo "Waiting for RDS instance to be available..."
        DB_HOST=$(terraform output -raw db_endpoint)
        MAX_RETRIES=30
        RETRY_COUNT=0
        
        until pg_isready -h $DB_HOST -U ${{ secrets.DB_USERNAME }}; do
          RETRY_COUNT=$((RETRY_COUNT+1))
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Timed out waiting for database to be ready"
            exit 1
          fi
          echo "Database not ready yet, waiting 30 seconds..."
          sleep 30
        done
        
        echo "Database is ready!"

    - name: Initialize Database Schema
      run: |
        export PGPASSWORD=${{ secrets.DB_PASSWORD }}
        DB_HOST=$(terraform output -raw db_endpoint)
        
        echo "Applying database schema..."
        psql -h $DB_HOST -U ${{ secrets.DB_USERNAME }} -d ksamds -f ../KSAMDS_DB.sql
        
        echo "Verifying schema installation..."
        psql -h $DB_HOST -U ${{ secrets.DB_USERNAME }} -d ksamds -c "\dt"